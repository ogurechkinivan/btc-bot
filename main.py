import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
import matplotlib.pyplot as plt
from io import BytesIO
import datetime

print("=== üöÄ –°—Ç–∞—Ä—Ç—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π main.py ===")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ BTC
def get_btc_price():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd,eur,uah,rub"
    print(f"üëÄ –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫: {url}")

    try:
        response = requests.get(url)
        data = response.json()
        btc = data["bitcoin"]
        return (
            f"üí∏ –ö—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞:\n"
            f"üá∫üá∏ USD: ${btc['usd']}\n"
            f"üá™üá∫ EUR: ‚Ç¨{btc['eur']}\n"
            f"üá∫üá¶ UAH: ‚Ç¥{btc['uah']}\n"
            f"üá∑üá∫ RUB: ‚ÇΩ{btc['rub']}"
        )
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC: {str(e)}"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ETH
def get_eth_price():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd,eur,uah,rub"
    print(f"üëÄ –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫: {url}")

    try:
        response = requests.get(url)
        data = response.json()
        eth = data["ethereum"]
        return (
            f"üí∏ –ö—É—Ä—Å Ethereum:\n"
            f"üá∫üá∏ USD: ${eth['usd']}\n"
            f"üá™üá∫ EUR: ‚Ç¨{eth['eur']}\n"
            f"üá∫üá¶ UAH: ‚Ç¥{eth['uah']}\n"
            f"üá∑üá∫ RUB: ‚ÇΩ{eth['rub']}"
        )
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ ETH: {str(e)}"


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ BTC
async def btc_chart(chat_id, bot):
    url = "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=1"
    print(f"üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è chat_id: {chat_id}")

    try:
        response = requests.get(url)
        data = response.json()
        prices = data["prices"]

        times = [datetime.datetime.fromtimestamp(p[0] / 1000) for p in prices]
        values = [p[1] for p in prices]

        plt.figure(figsize=(8, 4))
        plt.plot(times, values)
        plt.title("–ö—É—Ä—Å BTC –∑–∞ 24—á")
        plt.xlabel("–í—Ä–µ–º—è")
        plt.ylabel("USD")
        plt.tight_layout()

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        await bot.send_photo(chat_id=chat_id, photo=buf)

    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç", update.effective_user.username)

    keyboard = [
        [InlineKeyboardButton("üìà –ö—É—Ä—Å BTC", callback_data="btc_price")],
        [InlineKeyboardButton("üìâ –ö—É—Ä—Å ETH", callback_data="eth_price")],
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ BTC", callback_data="btc_chart")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    chat_id = query.message.chat.id
    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")

    if data == "btc_price":
        price = get_btc_price()
        await query.message.reply_text(price)

    elif data == "eth_price":
        price = get_eth_price()
        await query.message.reply_text(price)

    elif data == "btc_chart":
        await btc_chart(chat_id, context.bot)


# –ö–æ–º–∞–Ω–¥–∞ /btc
async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /btc –æ—Ç", update.effective_user.username)
    price = get_btc_price()
    await update.message.reply_text(price)


# –ö–æ–º–∞–Ω–¥–∞ /eth
async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /eth –æ—Ç", update.effective_user.username)
    price = get_eth_price()
    await update.message.reply_text(price)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("btc", btc))
    app.add_handler(CommandHandler("eth", eth))
    app.add_handler(CallbackQueryHandler(handle_buttons))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–∏–º–∞–π Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()
